@startuml
title Customer engagement domain

' === ENTITY CLASSES ===
class Customer {
    -UUID ownerBusinessId
    -String name
    -PhoneNumber phoneNumber
    -Instant timeCreated
}

class Conversation {
    -UUID ownerBusinessId
    -Customer customer
    -UUID businessPhoneNumberId
    -Label lastLabel
    -Instant timeLastUpdated
    -Instant timeCreated
}

class Message {
    -UUID ownerBusinessId
    -Conversation conversation
    -String messageContent
    -MessageDirection
    -Label messageLabel
    -Instant timeCreated
}

class SentimentRecord {
    -UUID ownerBusinessId
    -Customer customer
    -Message message
    -Label label
    -Instant timeCreated
}

class DailyActivity {
    -UUID ownerBusinessId
    -Int numOfConversations
    -Int numIncomingMessages
    -Int numOutgoingMessages
    -Date date
}

'=== VALUE OBJECTS ===
class PhoneNumber {
    -String phoneNumber
    -Boolean validate(String phoneNumber)
    {static}+PhoneNumber create(String phoneNumber)_
}

class Label {
    -LabelType value
    +Label create(String input)
    +boolean isValid(String input)
    +String getLabel()
}

enum LabelType {
    POSITIVE_FEEDBACK
    NEGATIVE_FEEDBACK
    COMPLAINT
    GENERAL_INQUIRY
    PURCHASE_INTENT
}

class MessageDirection {
    -MessageDirectionVariant value
    -MessageDirectionVariant validate(String direction)
    {static}+MessageDirection create(String direction)
}

enum MessageDirectionVariant {
    INCOMING
    OUTGOING
}

' === DOMAIN SERVICE ===
class SentimentService {
    +void recordSentimentChange(UUID ownerBusinessId, UUID customerId, UUID conversationId, UUID messageId)
}

'=== ASSOCIATIONS ===
Customer "1" -- "..*" Conversation: as customer
Conversation "1" -- "..*" Message: as conversation
Customer "1" -- "..*" SentimentRecord: as customer
Message "1" -- "1" SentimentRecord: as message

'=== EXTERNAL ENTITIES ===
class BusinessAccount {
    <<external>>
    -UUID id
}

note right of BusinessAccount::id
this is ownerBusinessId
end note

@enduml